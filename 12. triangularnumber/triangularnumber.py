""" The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.

What is the value of the first triangle number to have over five hundred
divisors?
"""

import time
import operator
import math

Ndiv = 500

t0 = time.time()

algorithm = 'naive'

def get_factorization(n):
  """ Find the prime factors of the number n, together with their
  multiplicities.
  """
  factors = []

  k = 0
  while n % 2 == 0:
    k += 1
    n /= 2

  if k > 0:
    factors.append((2, k))
  
  while n > 1:
    found = False
    for p in xrange(3, int(math.sqrt(n)) + 1, 2):
      if n % p == 0:
        found = True
        break

    if not found:
      p = n

    k = 0
    while n % p == 0:
      k += 1
      n /= p

    factors.append((p, k))

  return factors

if algorithm == 'naive':
  k = 1
  maxndiv = 1
  while True:
    trinumber = k*(k+1)/2
    primefactors = get_factorization(trinumber)
    ndivisors = reduce(operator.mul, [x[1]+1 for x in primefactors], 1)

    if ndivisors > maxndiv:
      maxndiv = ndivisors

    if ndivisors > Ndiv:
      break
    k += 1
else:
  raise Exception('Unknown algorithm.')

t1 = time.time()

print(("The first triangle number with over %d divisors occurs at k=%d, and is"+
  "equal to %d.") % (Ndiv, k, trinumber))
print("The number of divisors is %d" % ndivisors)

print 'Took', t1 - t0, 'seconds.'
